@using Schnauz.Client.Services.AppState
@using Schnauz.Shared.Dtos.enums
@inject AppStateService AppStateService
@attribute [Route(Paths.Profile)]

<PageTitle>Profile</PageTitle>

@if (!AppStateService.Profile.IsLoggedIn)
{
    <p>Loading profile...</p>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SearchMatch">Search match</MudButton>
}
else
{
    <h1>Hello @AppStateService.Profile.GetUserName()</h1>

    switch (AppStateService.Profile.GetUserState())
    {
        case UserStateDto.SEARCHING_A_MATCH:
            <p><em>Searching for a match...</em></p>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CancelSearch">Cancel search...</MudButton>
            break;
        case UserStateDto.PARTICIPATING_IN_MATCH:
            <p><em>Participating in a match...</em></p>
            <p>Press the button to enter in the match</p>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => NavigationManager.NavigateTo(Paths.Game)">Enter Match</MudButton>
            break;
        default:
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SearchMatch">Search match</MudButton>
            break;
    }
}




@code
{
    private SearchMatchCommand _searchCommand = new();
    private CancelSearchMatchCommand _cancelSearchCommand = new();
    
    protected override void OnInitialized()
    {
        AppStateService.Profile.OnChange += StateHasChanged; // Re-render on state change
        AppStateService.CurrentMatch.OnChange += StateHasChanged; // Re-render on state change
    }

    /**
     *  TODO: Check when this should be called...
     */
    public void Dispose()
    {
        AppStateService.Profile.OnChange -= StateHasChanged; // Avoid memory leaks
        AppStateService.CurrentMatch.OnChange -= StateHasChanged; // Avoid memory leaks
    }
    
    private async Task SearchMatch()
    {
        _searchCommand.Username = AppStateService.Profile.GetUserName();
        _searchCommand.Region = RegionDto.EUROPE;
        if (await CommandExecutor.Send(_searchCommand))
        {
            
        } else {
            ToastService.ShowError("Failed to search for a match.");
        }
    }
    
    private async Task CancelSearch()
    {
        _cancelSearchCommand.Username = AppStateService.Profile.GetUserName();
        if (await CommandExecutor.Send(_cancelSearchCommand))
        {
            
        } else {
            ToastService.ShowError("Failed to cancel search.");
        }
    }
}
